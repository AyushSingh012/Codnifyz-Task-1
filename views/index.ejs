<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registration Form</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <header>
    <h1>Registration Form</h1>
    <p>Join our community today!</p>
  </header>

  <div class="main-container">
    <aside class="sidebar">
      <div class="sidebar-content">
        <h2>Why Register?</h2>
        <p>By creating an account, you'll get access to exclusive features and content.</p>
        
        <h2>Benefits</h2>
        <ul>
          <li>Personalized experience</li>
          <li>Save your preferences</li>
          <li>Join our community</li>
        </ul>
      </div>
    </aside>

    <main class="content-area">
      <form id="registrationForm" method="POST">
        <!-- Username -->
        <label for="username">Username*:</label>
        <input type="text" id="username" name="username" value="<%= formData.username || '' %>">
        <% if (errors.username) { %>
          <span class="error"><%= errors.username %></span>
        <% } %>

        <!-- Email -->
        <label for="email">Email*:</label>
        <input type="email" id="email" name="email" value="<%= formData.email || '' %>">
        <% if (errors.email) { %>
          <span class="error"><%= errors.email %></span>
        <% } %>

        <!-- Password -->
        <label for="password">Password*:</label>
        <input type="password" id="password" name="password">
        <div id="password-strength"></div>
        <% if (errors.password) { %>
          <span class="error"><%= errors.password %></span>
        <% } %>

        <!-- Age -->
        <label for="age">Age*:</label>
        <input type="number" id="age" name="age" min="1" value="<%= formData.age || '' %>">
        <% if (errors.age) { %>
          <span class="error"><%= errors.age %></span>
        <% } %>

        <button type="submit">Register Now</button>
      </form>
    </main>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Password strength indicator
      const passwordInput = document.getElementById('password');
      const strengthMeter = document.getElementById('password-strength');

      passwordInput.addEventListener('input', function() {
        const strength = checkPasswordStrength(this.value);
        updateStrengthMeter(strength);
      });

      // Real-time username validation
      const usernameInput = document.getElementById('username');
      usernameInput.addEventListener('input', function() {
        const username = this.value.trim();
        clearError('username');
        
        if (username.length > 0 && username.length < 3) {
          showError('username', 'Username must be at least 3 characters');
        } else if (/[^a-zA-Z0-9_]/.test(username)) {
          showError('username', 'Only letters, numbers and underscores allowed');
        }
      });

      // Age validation
      const ageInput = document.getElementById('age');
      ageInput.addEventListener('input', function() {
        const age = parseInt(this.value);
        clearError('age');
        
        if (isNaN(age)) return;
        
        if (age < 18) {
          showError('age', 'You must be 18+');
        } else if (age > 120) {
          showError('age', 'Please enter a valid age');
        }
      });

      // Form submission
      document.getElementById('registrationForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const response = await fetch('/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams(formData)
        });

        const data = await response.json();
        
        if (data.errors) {
          // Display errors
          Object.entries(data.errors).forEach(([field, message]) => {
            showError(field, message);
          });
        } else if (data.success) {
          // Handle successful submission
          renderSuccessPage(data.userData, data.submissions);
          history.pushState(null, null, '/success');
        }
      });
    });

    function checkPasswordStrength(password) {
      let strength = 0;
      
      // Length check
      if (password.length >= 8) strength++;
      if (password.length >= 12) strength++;
      
      // Complexity checks
      if (/[A-Z]/.test(password)) strength++;
      if (/[0-9]/.test(password)) strength++;
      if (/[^A-Za-z0-9]/.test(password)) strength++;
      
      return Math.min(strength, 4); // Max strength of 4
    }

    function updateStrengthMeter(strength) {
      const meter = document.getElementById('password-strength');
      meter.innerHTML = '';
      
      const strengthText = ['Very Weak', 'Weak', 'Medium', 'Strong', 'Very Strong'];
      const colors = ['#e74c3c', '#e67e22', '#f1c40f', '#2ecc71', '#27ae60'];
      
      meter.textContent = `Strength: ${strengthText[strength]}`;
      meter.style.color = colors[strength];
      
      // Create visual indicator
      const bar = document.createElement('div');
      bar.style.height = '5px';
      bar.style.width = `${(strength + 1) * 20}%`;
      bar.style.backgroundColor = colors[strength];
      bar.style.marginTop = '5px';
      bar.style.transition = 'all 0.3s ease';
      meter.appendChild(bar);
    }

    function clearError(fieldId) {
      const errorElement = document.querySelector(`#${fieldId} + .error`);
      if (errorElement) errorElement.remove();
    }

    function showError(fieldId, message) {
      const field = document.getElementById(fieldId);
      const errorSpan = document.createElement('span');
      errorSpan.className = 'error';
      errorSpan.textContent = message;
      field.after(errorSpan);
      
      // Add error class to input
      field.classList.add('error-input');
      setTimeout(() => {
        field.classList.remove('error-input');
      }, 1500);
    }

    function renderSuccessPage(userData, submissions) {
      document.body.innerHTML = `
        <header>
          <h1>Thank You, ${userData.username}!</h1>
          <p>Your registration was successful</p>
        </header>

        <div class="main-container">
          <aside class="sidebar">
            <div class="sidebar-content">
              <h2>Next Steps</h2>
              <p>Check your email for a confirmation message.</p>
              
              <h2>Your Account</h2>
              <p>Username: <strong>${userData.username}</strong></p>
              <p>Email: <strong>${userData.email}</strong></p>
            </div>
          </aside>

          <main class="content-area">
            <div class="result-card">
              <h2>Your Details:</h2>
              <p><strong>Email:</strong> ${userData.email}</p>
              <p><strong>Age:</strong> ${userData.age}</p>
            </div>

            <h2>Community Members</h2>
            <ul>
              ${submissions.map((sub, index) => `
                <li>
                  <span class="submission-number">#${index + 1}</span>
                  ${sub.username} (${sub.email}) - Age: ${sub.age}
                </li>
              `).join('')}
            </ul>

            <a href="/" class="back-link" onclick="navigateTo(event, '/')">‚Üê Back to Registration Form</a>
          </main>
        </div>
      `;
    }

    function navigateTo(event, path) {
      event.preventDefault();
      history.pushState(null, null, path);
      location.reload();
    }

    // Handle browser navigation
    window.addEventListener('popstate', function() {
      if (location.pathname === '/') {
        location.reload();
      }
    });
  </script>
  </section><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>